top_srcdir = @top_srcdir@

PKG_NAME = clopinet
SOURCES  = \
	log.ml \
	environ.ml environ.mli \
	prefs.mli prefs.ml \
	cluster.ml \
	serial.ml \
	geoip.ml \
	output.ml \
	peg.ml \
	datatype.ml \
	least63.ml \
	uLeast63.ml \
	user_filter.ml \
	dynlinker.ml \
	tuple2.ml \
	tuple3.ml \
	tuple4.ml \
	tuple5.ml \
	tuple6.ml \
	tuple7.ml \
	tuple8.ml \
	tuple9.ml \
	tuple10.ml \
	tuple11.ml \
	tuple12.ml \
	tuple13.ml \
	tuple17.ml \
	distribution.ml \
	aggregator.ml \
	dbfile.mli dbfile.ml \
	table.mli table.ml \
	plot.ml \
	subnet.ml \
	metric.ml \
	traffic.ml \
	tcp.ml \
	web.ml \
	dns.ml \
	flow.ml

C_SOURCES = ll_serial.c ll_geoip.c ll_environ.c
LIBS = -cclib -lpcap -cclib -lGeoIP

EXAMPLES_BYTE = \
	dns_exe.byte web_exe.byte tcp_exe.byte \
	traffic_exe.byte flow_exe.byte runtest.byte

REQUIRES = batteries bitstring bitstring.syntax dynlink parmap

ifneq (@have_graphics@,no)
EXAMPLES_BYTE += cluster_test.byte
REQUIRES += graphics
endif

EXAMPLES_OPT = $(EXAMPLES_BYTE:.byte=.opt)
EXAMPLES = $(EXAMPLES_BYTE) $(EXAMPLES_OPT)

SYNTAX=-syntax camlp4o

.PHONY: all loc
all: clopinet.conf $(XARCHIVE) examples www

least63.ml:
ifeq (@OCAML_WORD_SIZE@,64)
#	Regular ints are good enough
	@echo 'include Datatype.Integer' >> $@
else
#	Must use boxed Int64 then
	@echo 'include Datatype.Integer64' >> $@
endif

uLeast63.ml:
ifeq (@OCAML_WORD_SIZE@,64)
#	Regular ints are good enough
	@echo 'include Datatype.UInteger' >> $@
else
#	Must use boxed Int64 then
	@echo 'include Datatype.UInteger64' >> $@
endif

include $(top_srcdir)/make.common

opt: $(XARCHIVE)

examples: $(XARCHIVE) $(EXAMPLES_OPT)
$(EXAMPLES_BYTE): $(ARCHIVE) libclopinet.a
$(EXAMPLES_OPT): $(XARCHIVE) libclopinet.a

check.byte: $(ARCHIVE)
check.opt: $(XARCHIVE)
check-spec: check.byte
	@./check.byte || echo "custom checks FAILED"

clopinet.top: $(ARCHIVE) $(CLIB)
	# for some reason we must give here -ccopt -L. in order for ocamlmktop to find libclopinet.a
	# passing this through -passopt is not particularly elegant.
	$(OCAMLMKTOP) -o $@ $(SYNTAX) -package "findlib $(REQUIRES)" -custom -linkpkg -passopt -ccopt -passopt -L. $(ARCHIVE)

# maketuple.opt does not depend on $(ARCHIVE)
maketuple.opt: maketuple.cmx
	$(OCAMLOPT) -o $@ $(SYNTAX) -package "$(REQUIRES)" -linkpkg $(OCAMLOPTFLAGS) $^

clopinet.conf: Makefile clopinet.conf.tail
	@echo "# Configuration options - Do not edit" > $@
	@echo "export PREFIX='$(prefix)'" >> $@
ifneq "@DBDIR@" ""
	@echo "export DBDIR='@DBDIR@'" >> $@
else
	@echo "export DBDIR='$(localstatedir)/clopinet.db'" >> $@
endif
ifneq "@GEOIPDB@" ""
	@echo "export GEOIPDB='@GEOIPDB@'" >> $@
else
	@echo "export GEOIPDB='$(datarootdir)/GeoIP/GeoIP.dat'" >> $@
endif
ifneq "@ADD_PATH@" ""
	@echo 'export PATH="@ADD_PATH@:$(bindir):$$PATH"' >> $@
else
	@echo 'export PATH="$(bindir):$$PATH"' >> $@
endif
	@echo "export OCAMLFIND='@OCAMLFIND@'" >> $@
	@echo "export CPN_LOG_DIR='$(localstatedir)/log'" >> $@
	@echo "export CPN_CONF_DIR='$(sysconfdir)'" >> $@
	@echo "export CPN_BIN_DIR='$(bindir)'" >> $@
	@echo "export CPN_WWW_DIR='$(wwwdir)'" >> $@
	@cat clopinet.conf.tail >> $@

PROGRAMS = \
	dns_exe.opt web_exe.opt tcp_exe.opt traffic_exe.opt flow_exe.opt \
	clopinet
CONFFILES = clopinet.conf junkie.scm

install-programs: $(PROGRAMS)
	install -d $(bindir)
	install $^ $(bindir)

install-conf: $(CONFFILES)
	install -d $(sysconfdir)
	install -m 0644 $^ $(sysconfdir)

install-spec: install-programs install-conf
	$(MAKE) -C www install

uninstall-spec:
	@for f in $(PROGRAMS) ; do \
		rm "$(prefix)/bin/$$f" ; \
	done
	@for f in $(CONFFILES) ; do \
		rm "$(prefix)/etc/$$f" ; \
	done
	$(MAKE) -C www uninstall

# Dependancies on tuples can't be guessed by ocamldep
TUPLES=tuple1.ml tuple2.ml tuple3.ml tuple4.ml tuple5.ml tuple6.ml tuple7.ml tuple8.ml tuple9.ml tuple10.ml tuple11.ml tuple12.ml tuple13.ml tuple14.ml tuple15.ml tuple16.ml tuple17.ml
$(TUPLES): maketuple.opt
$(TUPLES:.ml=.cmo) least63.cmo uLeast63.cmo: peg.cmo datatype.cmo
$(TUPLES:.ml=.cmi) least63.cmi uLeast63.cmi: peg.cmi datatype.cmi
$(TUPLES:.ml=.cmx) least63.cmx uLeast63.cmx: peg.cmx datatype.cmx

tuple%.ml: maketuple.opt
	@n=$$(echo $@ | sed -e 's/^tuple\([0-9]*\).ml$$/\1/') ;\
	 echo "Building Tuple functor for N=$$n" ;\
	 ./maketuple.opt $$n > $@

# As dependancies are computed before some source files are build, we have to specify a few by hand

distribution.cmo: tuple5.cmo least63.cmo
flow.cmo: tuple13.cmo least63.cmo uLeast63.cmo
metric.cmo: tuple2.cmo
traffic.cmo: tuple2.cmo tuple17.cmo tuple3.cmo least63.cmo uLeast63.cmo
distribution.cmx: tuple5.cmx least63.cmx
flow.cmx: tuple13.cmx least63.cmx uLeast63.cmx
metric.cmx: tuple2.cmx
traffic.cmx: tuple2.cmx tuple17.cmx tuple3.cmx least63.cmx uLeast63.cmx

clean-spec:
	$(MAKE) -C www clean
	rm -f clopinet.top tuple*.ml least63.ml uLeast64.ml

dep-spec:
	$(MAKE) -C www dep

loc:
	@ls *.ml *.mli www/*.ml -1 | grep -v tuple | xargs cat | wc -l

.PHONY: www
www:
	$(MAKE) -C $(top_srcdir)/www

