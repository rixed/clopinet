* Provides of_string, to_string, etc for every Datatype.S automatically
with a functor

* Read zipped files.

* Parallelize reading.

When seq scanning various files, fork several reader programs and
forward their outputs to the client (the binary tuples that may be
pretty-printed latter).

In other words we want a version of the iterator that takes a list
of files and forks many subprograms, calling the user callback for
anything received from anyone.

* More tests for the helper functions and the (de)serializers.

* Parallelize writing (less obvious but less usefull).

For writing, either we allow anyone to append in any file, but then
the meta data must be merged somehow (might not be possible with some
aggregate function) ; or we allocate writers to some index value, the
forked writer being responsible for the meta data and the serialization,
but only a central writer performs the accumulations in the various Lods.

* Lock tables to prevent several concurrent inserts

* When loading, refuse to create a new table if a special option was
not present (like "-create")

* It would be nice if /32 could be omitted from Cidrs.

* It would be nice if the microseconds could be omitted from Timestamps.

* It would be even nicer if any reasonably widespread date format were 
understood by Timestamp.read_txt. Or provide a helper function (for better
performances)

* Think of a way to ensure that when we compute a hash to select a part of
a table we actually hash the correct datatype (ie. Dns0.hash takes a full 
record, extract something then hash this, while Dns0.dump hash a server IP,
check that what Dns0.hash extract is also an IP). Additionally, simplify
the index handling (Dns0.dump is too complex wrt. index)

